/*code generated by chatGPT*/

#include <iostream>
#include <string>
#include <algorithm>

class AVLNode {
public:
    std::string keyword;
    std::string meaning;
    AVLNode* left;
    AVLNode* right;
    int height;

    AVLNode(const std::string& key, const std::string& value) : keyword(key), meaning(value), left(nullptr), right(nullptr), height(1) {}
};

class AVLDictionary {
private:
    AVLNode* root;

    int height(AVLNode* node) {
        if (node == nullptr)
            return 0;
        return node->height;
    }

    int getBalance(AVLNode* node) {
        if (node == nullptr)
            return 0;
        return height(node->left) - height(node->right);
    }

    AVLNode* rotateRight(AVLNode* y) {
        AVLNode* x = y->left;
        AVLNode* T2 = x->right;

        x->right = y;
        y->left = T2;

        y->height = std::max(height(y->left), height(y->right)) + 1;
        x->height = std::max(height(x->left), height(x->right)) + 1;

        return x;
    }

    AVLNode* rotateLeft(AVLNode* x) {
        AVLNode* y = x->right;
        AVLNode* T2 = y->left;

        y->left = x;
        x->right = T2;

        x->height = std::max(height(x->left), height(x->right)) + 1;
        y->height = std::max(height(y->left), height(y->right)) + 1;

        return y;
    }

    AVLNode* insertNode(AVLNode* node, const std::string& key, const std::string& value) {
        if (node == nullptr)
            return new AVLNode(key, value);

        if (key < node->keyword)
            node->left = insertNode(node->left, key, value);
        else if (key > node->keyword)
            node->right = insertNode(node->right, key, value);
        else {
            // Key already exists, update the meaning
            node->meaning = value;
            return node;
        }

        node->height = 1 + std::max(height(node->left), height(node->right));

        int balance = getBalance(node);

        if (balance > 1 && key < node->left->keyword)
            return rotateRight(node);

        if (balance < -1 && key > node->right->keyword)
            return rotateLeft(node);

        if (balance > 1 && key > node->left->keyword) {
            node->left = rotateLeft(node->left);
            return rotateRight(node);
        }

        if (balance < -1 && key < node->right->keyword) {
            node->right = rotateRight(node->right);
            return rotateLeft(node);
        }

        return node;
    }

    AVLNode* minValueNode(AVLNode* node) {
        AVLNode* current = node;
        while (current->left != nullptr)
            current = current->left;
        return current;
    }

    AVLNode* deleteNode(AVLNode* root, const std::string& key) {
        if (root == nullptr)
            return root;

        if (key < root->keyword)
            root->left = deleteNode(root->left, key);
        else if (key > root->keyword)
            root->right = deleteNode(root->right, key);
        else {
            if (root->left == nullptr || root->right == nullptr) {
                AVLNode* temp = root->left ? root->left : root->right;

                if (temp == nullptr) {
                    temp = root;
                    root = nullptr;
                } else {
                    *root = *temp;
                }

                delete temp;
            } else {
                AVLNode* temp = minValueNode(root->right);

                root->keyword = temp->keyword;
                root->meaning = temp->meaning;

                root->right = deleteNode(root->right, temp->keyword);
            }
        }

        if (root == nullptr)
            return root;

        root->height = 1 + std::max(height(root->left), height(root->right));

        int balance = getBalance(root);

        if (balance > 1 && getBalance(root->left) >= 0)
            return rotateRight(root);

        if (balance > 1 && getBalance(root->left) < 0) {
            root->left = rotateLeft(root->left);
            return rotateRight(root);
        }

        if (balance < -1 && getBalance(root->right) <= 0)
            return rotateLeft(root);

        if (balance < -1 && getBalance(root->right) > 0) {
            root->right = rotateRight(root->right);
            return rotateLeft(root);
        }

        return root;
    }

    void inorderTraversal(AVLNode* node) {
        if (node == nullptr)
            return;

        inorderTraversal(node->left);
        std::cout << node->keyword << ": " << node->meaning << std::endl;
        inorderTraversal(node->right);
    }

    void reverseInorderTraversal(AVLNode* node) {
        if (node == nullptr)
            return;

        reverseInorderTraversal(node->right);
        std::cout << node->keyword << ": " << node->meaning << std::endl;
        reverseInorderTraversal(node->left);
    }

    AVLNode* searchNode(AVLNode* node, const std::string& key, int& comparisons) {
        if (node == nullptr)
            return nullptr;

        if (key == node->keyword)
            return node;

        if (key < node->keyword) {
            comparisons++;
            return searchNode(node->left, key, comparisons);
        } else {
            comparisons++;
            return searchNode(node->right, key, comparisons);
        }
    }

public:
    AVLDictionary() : root(nullptr) {}

    void addKeyword(const std::string& key, const std::string& value) {
        root = insertNode(root, key, value);
        std::cout << "Keyword added successfully!" << std::endl;
    }

    void deleteKeyword(const std::string& key) {
        root = deleteNode(root, key);
        std::cout << "Keyword deleted successfully!" << std::endl;
    }

    void updateKeyword(const std::string& key, const std::string& value) {
        AVLNode* node = searchNode(root, key);
        if (node != nullptr) {
            node->meaning = value;
            std::cout << "Keyword updated successfully!" << std::endl;
        } else {
            std::cout << "Keyword not found!" << std::endl;
        }
    }

    void displayAscendingOrder() {
        inorderTraversal(root);
    }

    void displayDescendingOrder() {
        reverseInorderTraversal(root);
    }

    int findMaxComparisons(const std::string& key) {
        int comparisons = 0;
        searchNode(root, key, comparisons);
        return comparisons;
    }
};

int main() {
    AVLDictionary dictionary;
    int choice;
    std::string key, meaning;

    do {
        std::cout << "\n------ Dictionary Menu ------\n";
        std::cout << "1. Add a keyword\n";
        std::cout << "2. Delete a keyword\n";
        std::cout << "3. Update a keyword\n";
        std::cout << "4. Display data in ascending order\n";
        std::cout << "5. Display data in descending order\n";
        std::cout << "6. Find maximum comparisons for a keyword\n";
        std::cout << "0. Exit\n";
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case 0:
                std::cout << "Exiting the program... Goodbye!" << std::endl;
                break;

            case 1:
                std::cout << "Enter the keyword: ";
                std::cin.ignore();
                std::getline(std::cin, key);
                std::cout << "Enter the meaning: ";
                std::getline(std::cin, meaning);
                dictionary.addKeyword(key, meaning);
                break;

            case 2:
                std::cout << "Enter the keyword to delete: ";
                std::cin.ignore();
                std::getline(std::cin, key);
                dictionary.deleteKeyword(key);
                break;

            case 3:
                std::cout << "Enter the keyword to update: ";
                std::cin.ignore();
                std::getline(std::cin, key);
                std::cout << "Enter the new meaning: ";
                std::getline(std::cin, meaning);
                dictionary.updateKeyword(key, meaning);
                break;

            case 4:
                std::cout << "\n------ Data in Ascending Order ------\n";
                dictionary.displayAscendingOrder();
                break;

            case 5:
                std::cout << "\n------ Data in Descending Order ------\n";
                dictionary.displayDescendingOrder();
                break;

            case 6:
                std::cout << "Enter the keyword to search: ";
                std::cin.ignore();
                std::getline(std::cin, key);
                std::cout << "Maximum comparisons required: " << dictionary.findMaxComparisons(key) << std::endl;
                break;

            default:
                std::cout << "Invalid choice! Please try again." << std::endl;
                break;
        }
    } while (choice != 0);

    return 0;
}
